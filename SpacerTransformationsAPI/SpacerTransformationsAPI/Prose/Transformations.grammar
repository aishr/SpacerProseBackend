using SpacerTransformationsAPI.Models;
using SpacerTransformationsAPI.Prose;
using System.Collections.Generic;

using semantics SpacerTransformationsAPI.Prose.Semantics;
using learners SpacerTransformationsAPI.Prose.WitnessFunctions;

language Transformations;

@complete feature double Score = RankingScore;

@start Node outputTree := ToImp(inputTree, leftSide) | Move(inputTree, position, left) | 
SquashNegation(inputTree, symbol) | FlipComparison(inputTree, symbol, name);
List<int> leftSide := FilterByName(inputTree, name) | FilterByProcess(inputTree, process) | FilterStatic(inputTree, type);
int position := IndexByName(inputTree, name) | IndexFromFront(inputTree, index) | IndexFromBack(inputTree, index)

@input Node inputTree;
string name;
string process;
int index;
StaticFilterType type;
string symbol;
bool left;
