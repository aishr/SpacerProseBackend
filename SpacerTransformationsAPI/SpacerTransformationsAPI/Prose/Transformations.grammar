using SpacerTransformationsAPI.Models;
using SpacerTransformationsAPI.Prose;
using System.Collections.Generic;

using semantics SpacerTransformationsAPI.Prose.Semantics;
using learners SpacerTransformationsAPI.Prose.WitnessFunctions;

language Transformations;

@complete feature double Score = RankingScore;

@start Node outputTree := Transform(inputTree, leftSide) | Move(inputTree, positionLeft) | SquashNegation(inputTree, temp) | FlipComparison(inputTree, temp);
List<int> leftSide := Filter(inputTree, name) | FilterByProcess(inputTree, process) | FilterAllButLast(inputTree, temp) | FilterByNot(inputTree, temp);
Tuple<int, bool> positionLeft := MakeMoveLeft(inputTree, position) | MakeMoveRight(inputTree, position)
string position := IndexByName(inputTree, name) | IndexFromFront(inputTree, index) | IndexFromBack(inputTree, index)

@input Node inputTree;
string name;
string process;
string index;
string temp;
