using SpacerTransformationsAPI.Models;
using SpacerTransformationsAPI.Prose;
using System.Collections.Generic;

using semantics SpacerTransformationsAPI.Prose.Semantics;
using learners SpacerTransformationsAPI.Prose.WitnessFunctions;

language Transformations;

@complete feature double Score = RankingScore;

@start Node outputTree := Id(inputTree) | Move(outputTree, position, direction) | FlipComparison(inputTree, symbol, flip) | ToImp(outputTree, leftSide);
List<int> leftSide := FilterByName(outputTree, name) | FilterByProcess(outputTree, process) | FilterStatic(outputTree, type);
int position := IndexByName(outputTree, name) | IndexFromFront(outputTree, index) | IndexFromBack(outputTree, index);
bool flip := FlipByName(inputTree, name) | FlipByProcess(inputTree, process);

@input Node inputTree;
string name;
string process;
int index;
StaticFilterType type;
string symbol;
Tuple<int, bool> direction;